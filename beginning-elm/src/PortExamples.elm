port module PortExamples exposing (..)

import Browser
import Html exposing (..)
import Html.Events exposing (onClick)


type alias Model =
    String


view : Model -> Html Msg
view model =
    div []
        [ button [ onClick SendDataToJS ]
            [ text "Send Data to JavaScript" ]
        , br [] []
        , br [] []
        , text <| "Data received from JavaScript: " ++ model
        ]


type Msg
    = SendDataToJS
    | ReceivedDataFromJS Model


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SendDataToJS ->
            ( model, sendData "Hello JavaScript!" )

        ReceivedDataFromJS data ->
            ( data, Cmd.none )



{-
   The `port` keyword automatically creates a function for us. All it expects is the function's name and type. The
   function generated by port takes only one argument. We don't need to create a body for this function. port automatically
   does that for us by looking at the function's type. THe function generated by port must return Cmd msg and nothing else.

   Unlike all other commands, the command generated by a port function doesn't send a message back to the update function
   once the operation is complete. A command that doesn't send any messages back to the app always has the type Cmd msg.

   The syntax for calling a port function is identical to that of a regular function.
-}


port sendData : String -> Cmd msg



{-
   The incoming port function also takes only one argument. The argument here is a function that takes the model and
   returns a message.
   The incoming port function always returns a subscription, whereas the outgoing port function returns a command.
-}


port receiveData : (Model -> msg) -> Sub msg


init : () -> ( Model, Cmd Msg )
init _ =
    ( "", Cmd.none )


main : Program () Model Msg
main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }


subscriptions : Model -> Sub Msg
subscriptions _ =
    receiveData ReceivedDataFromJS
